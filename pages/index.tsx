import Head from "next/head";
import AppShell from "@/components/layout/appshell";
import Card from "@/components/post/card";
import { GetServerSideProps } from "next";
import { DehydratedState, dehydrate } from "@tanstack/react-query";
import { fetchPosts, getQueryClient, usePostsInfiniteQuery } from "@/queries";
import { useRouter } from "next/router";
import { PostSort } from "@/types";
import { useState } from "react";

interface PrefetchQueryResult {
  dehydratedState: DehydratedState;
}

export default function Home() {
  const { query } = useRouter();
  const sort = (query?.sort ?? "new") as PostSort;
  const { data, fetchNextPage, hasNextPage } = usePostsInfiniteQuery({
    sort,
  });
  console.log(`[data] : `, data);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppShell>
        {[1, 2, 3, 4, 5].map((val) => (
          <Card key={val} />
        ))}
        <button
          onClick={() => {
            // setPage((page) => page + 1);
            fetchNextPage();
          }}
          disabled={!hasNextPage}>
          fetch next page
        </button>
      </AppShell>
    </>
  );
}

export const getServerSideProps: GetServerSideProps<PrefetchQueryResult> = async ({
  query,
}) => {
  const queryClient = getQueryClient();
  const sort: "new" | "popular" = (query.sort ?? "new") as "new" | "popular";
  await queryClient.fetchInfiniteQuery(["posts", { sort }], fetchPosts);

  return {
    props: {
      dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),
    },
  };
};
